{"code":"// main.ts\nimport { Plugin, TFile, TFolder } from \"obsidian\";\nimport { DEFAULT_SETTINGS, BooxSyncSettingTab } from \"./settings\";\nimport { parseHighlightFile } from \"./parser\";\nimport { ensureDefaultTemplateExists } from \"./bookTemplate\";\nexport default class BooxSync extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.scanIntervalId = null;\n    }\n    async onload() {\n        console.log(\"Boox Sync Plugin loading...\");\n        await this.loadSettings();\n        await ensureDefaultTemplateExists(this.app);\n        this.addSettingTab(new BooxSyncSettingTab(this.app, this));\n        this.startPolling();\n    }\n    onunload() {\n        this.stopPolling();\n    }\n    async loadSettings() {\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n    }\n    async saveSettings() {\n        await this.saveData(this.settings);\n        this.restartPolling();\n    }\n    startPolling() {\n        this.stopPolling();\n        this.scanForImports(); // Run immediately on load\n        this.scanIntervalId = window.setInterval(() => this.scanForImports(), this.settings.scanIntervalSeconds * 1000);\n    }\n    stopPolling() {\n        if (this.scanIntervalId !== null) {\n            clearInterval(this.scanIntervalId);\n            this.scanIntervalId = null;\n        }\n    }\n    restartPolling() {\n        this.startPolling();\n    }\n    async scanForImports() {\n        const watchFolder = this.app.vault.getAbstractFileByPath(this.settings.booxFolder);\n        if (!watchFolder || !(watchFolder instanceof TFolder)) {\n            console.warn(`Boox Sync: Folder not found: ${this.settings.booxFolder}`);\n            return;\n        }\n        for (const file of watchFolder.children) {\n            if (file instanceof TFile && file.extension === \"txt\") {\n                try {\n                    await parseHighlightFile(this, file);\n                }\n                catch (err) {\n                    console.error(`Boox Sync: Failed to process ${file.name}`, err);\n                }\n            }\n            if (this.settings.importPDFs && file instanceof TFile && file.extension === \"pdf\") {\n                await this.linkPDFNote(file);\n            }\n        }\n    }\n    async linkPDFNote(file) {\n        const notePath = `${this.settings.outputFolder}/${file.basename}.md`;\n        let bookNote = this.app.vault.getAbstractFileByPath(notePath);\n        if (!bookNote) {\n            const content = `# ${file.basename}\\n\\n## Handwritten Notes\\n\\n![[${file.path}]]\\n`;\n            await this.app.vault.create(notePath, content);\n        }\n    }\n}\n","references":["/Users/muhammad_saadiq/Documents/@L-P/Obsidian/Plugins/BooxSync-Starter/node_modules/obsidian/obsidian.d.ts","/Users/muhammad_saadiq/Documents/@L-P/Obsidian/Plugins/BooxSync-Starter/src/settings.ts","/Users/muhammad_saadiq/Documents/@L-P/Obsidian/Plugins/BooxSync-Starter/src/parser.ts","/Users/muhammad_saadiq/Documents/@L-P/Obsidian/Plugins/BooxSync-Starter/src/bookTemplate.ts"]}
